<?php

require_once realpath(dirname(__FILE__)) . '/include/common.inc';

/**
 * @file
 * Schema and installation hooks for wechat_lite module.
 */

/**
 * Implements hook_schema().
 * @See https://www.drupal.org/node/146939 Schema Reference
 */
function wechat_lite_schema() {
  $schema['wechat_lite_message'] = array(
    'description' => 'WeChat Messages managed by Drupal.',
    'fields' => array(
      'mid' => array(
        'description' => 'Message ID Drupal managed.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'User ID who sent message.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'ToUserName' => array(
        'description' => 'User Name / OpenID which the message is sent to ',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
      ),
      'MsgId' => array(
        'description' => 'Message ID managed by WeChat / Tencent.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
      ),
      'MsgType' => array(
        'description' => 'The type of message.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'AgentId' => array(
        'description' => 'Application ID from which message is sent.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The status of message; -1: error, 0:received, 6: attached media fetched,',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the message was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the message was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'wechat_lite_message_updated' => array('updated'),
      'wechat_lite_message_created' => array('created'),
      'wechat_lite_message_ToUserName' => array(array('ToUserName', 20)),
      'wechat_lite_message_MsgType' => array(array('MsgType', 10)),
      'wechat_lite_message_status' => array('status'),
      'wechat_lite_message_author' => array('uid'),
    ),
    'unique keys' => array(
      'wechat_lite_message_msgid' => array('MsgId'),
    ),
    'foreign keys' => array(
      'wechat_lite_message_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('mid'),
  );

  return $schema;

}

/**
 * Implements hook_enable().
 */
function wechat_lite_enable(){
  // Setup vocabulary for WeChat Message Type
  if (wechat_lite_prepare_vocabularies()){
    wechat_lite_prepare_terms();
  }

}

/**
 * prepare Vocabularies which will be used
 */
function wechat_lite_prepare_vocabularies(){

  $vocabularies = array(
    array(
      'name' => 'WeChat Lite Message Type',
      'machine_name' => 'wechat_lite_message_type',
      'description' => 'Contains terms for WeChat Message Types'
    ),
    array(
      'name' => 'WeChat Lite Account Type',
      'machine_name' => 'wechat_lite_account_type',
      'description' => 'Contains terms for WeChat Account Types'
    ),

  );

  $ret = true;

  foreach ($vocabularies as $vocabulary){

    if ( taxonomy_vocabulary_machine_name_load($vocabulary['machine_name']) ){
      watchdog(
        MODULE_NAME,
        "Vocabulary exists already: %vocabulary",
        array('%vocabulary' => $vocabulary['machine_name'])
      );
      $ret = false;
    }
    else if (taxonomy_vocabulary_save((object)$vocabulary) === FALSE){
      watchdog(
        MODULE_NAME,
        "Vocabulary can't be initialed: %vocabulary",
        array('%vocabulary' => $vocabulary['machine_name'])
      );
      $ret = false;
    }
  }
  return $ret;
}

/**
 * prepare Terms which will be used
 */
function wechat_lite_prepare_terms(){
  $taxonomies = array(
    'wechat_lite_message_type' => array(
      'text',
      'image',
      'event',
    ),
    'wechat_lite_account_type' => array(
      'Service Account',
      'Enterprise Account',
    ),
  );

  foreach (array_keys($taxonomies) as $vocabulary_machine_name){

    $vocabulary = entity_metadata_wrapper(
      'taxonomy_vocabulary',
      taxonomy_vocabulary_machine_name_load($vocabulary_machine_name)
    );

    foreach ($taxonomies[$vocabulary_machine_name] as $term){
      $data = array(
        'name' => $term,
        'vid' => $vocabulary->vid->value(),
        'parent' => array(0),
      );

      $term_wrapper = entity_metadata_wrapper('taxonomy_term', entity_create('taxonomy_term', $data));
      $term_wrapper->save();
      /////////// Alternative implementation for learning purpose //////////////
      // entity_save('taxonomy_term', entity_create('taxonomy_term', $data)); //
      //////////////////////////////////////////////////////////////////////////
    }
  }

  return true;
}

/**
 * Implements hook_update_N().
 */
function wechat_lite_update_7001(&$sandbox) {
//  $ret = wechat_lite_prepare_vocabularies();
//  if ($ret !== true){
//    throw new DrupalUpdateException('Error for creating vocabulary: '.$ret);
//  }
//
//  $ret = wechat_lite_prepare_terms();
//  if ($ret !== true){
//    throw new DrupalUpdateException('Error for creating terms.');
//  }
}

